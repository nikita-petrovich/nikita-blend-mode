// MIT License
// 
// Copyright (c) 2025 Nikita Petrovich
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//optimisation parameter to calculate average color. Less for accurate result
DEFINE_UI_PARAMS(step, Step, DCTLUI_SLIDER_INT, 50, 20, 100, 1)

//standard Gain and Offset. For experiments
DEFINE_UI_PARAMS(gain, Gain, DCTLUI_SLIDER_FLOAT, 1.f, 0.f, 2.f, 0.1f)
DEFINE_UI_PARAMS(offset, Offset, DCTLUI_SLIDER_FLOAT, 0.f, -1.f, 1.f, 0.1f)

DEFINE_UI_PARAMS(average, Average Color, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(composite_mode, Composite Mode, DCTLUI_CHECK_BOX, 1)

DEFINE_UI_PARAMS(copyright, DCTL by, DCTLUI_COMBO_BOX, 0, { name, vimeo, version }, { Nikita Petrovich, vimeo.com/petrovichnik, v0.1.0 })



__DEVICE__ float ConvertRGBToLum(float R, float G, float B)
{
    return (0.2126f * R + 0.7152f * G + 0.0722f * B); //rec 709
}



__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{
    // RGB of our top layer
    float R = _tex2D (p_TexR, p_X, p_Y);
    float G = _tex2D (p_TexG, p_X, p_Y);
    float B = _tex2D (p_TexB, p_X, p_Y);
    float Lum = ConvertRGBToLum (R, G, B);

    // RGB of out source image
    float R_source = _tex2D (p_TexR, p_X, p_Y);
    float G_source = _tex2D (p_TexG, p_X, p_Y);
    float B_source = _tex2D (p_TexB, p_X, p_Y);

    if (average == 1) {
        R = 0.f;
        G = 0.f;
        B = 0.f;

        int count = 0;
        for (int Y = 0; Y < p_Height; Y += step) {
            for (int X = 0; X < p_Width; X += step) {
                R += _tex2D (p_TexR, X, Y);
                G += _tex2D (p_TexG, X, Y);
                B += _tex2D (p_TexB, X, Y);
                ++count;
            }
        }

        R /= count;
        G /= count;
        B /= count;
    }

    R *= gain;
    G *= gain;
    B *= gain;

    R += offset;
    G += offset;
    B += offset;

    if (composite_mode == 1) { 
        R = R_source + (Lum - R);
        G = G_source + (Lum - G);
        B = B_source + (Lum - B);
    }

    return make_float3 (R, G, B);
}
